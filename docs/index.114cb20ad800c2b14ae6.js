!function(s){var l={};function e(a){if(l[a])return l[a].exports;var c=l[a]={i:a,l:!1,exports:{}};return s[a].call(c.exports,c,c.exports,e),c.l=!0,c.exports}e.m=s,e.c=l,e.d=function(s,l,a){e.o(s,l)||Object.defineProperty(s,l,{configurable:!1,enumerable:!0,get:a})},e.r=function(s){Object.defineProperty(s,"__esModule",{value:!0})},e.n=function(s){var l=s&&s.__esModule?function(){return s.default}:function(){return s};return e.d(l,"a",l),l},e.o=function(s,l){return Object.prototype.hasOwnProperty.call(s,l)},e.p="/",e(e.s=56)}(Array(22).concat([function(s,l,e){},,,function(s,l,e){},,function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<header><div class="title"><div class="title-name">Global.CSS</div><div class="shields"><a class="npm-version" href="https://www.npmjs.com/package/global.css"><img src="https://img.shields.io/npm/v/global.css.svg?style=social" alt="npm version"></a></div></div><div class="nav-list"><div class="nav-list-mixins"><div class="nav-item-title">mixins</div><a class="nav-item" href="#Border">Border</a><a class="nav-item-sub" href="#UsageBorder">border</a><a class="nav-item-sub" href="#UsageBorderRadius">border-radius</a><a class="nav-item-sub" href="#UsageBorderTop">border-top</a><a class="nav-item-sub" href="#UsageBorderBottom">border-bottom</a><a class="nav-item-sub" href="#UsageBorderVertical">border-vertical</a><a class="nav-item-sub" href="#UsageBorderLeft">border-left</a><a class="nav-item-sub" href="#UsageBorderRight">border-right</a><a class="nav-item-sub" href="#UsageBorderHorizontal">border-horizontal</a><a class="nav-item" href="#Ellipsis">Ellipsis</a><a class="nav-item-sub" href="#UsageEllipsis">ellipsis</a><a class="nav-item" href="#Ripple">Ripple</a><a class="nav-item-sub" href="#UsageRipple">ripple</a><a class="nav-item" href="#Grid">Grid</a><a class="nav-item-sub" href="#UsageGrid">grid</a><a class="nav-item-sub" href="#UsageGridGutter">grid-gutter</a><a class="nav-item-sub" href="#UsageGridCol">grid-col</a><a class="nav-item-sub" href="#UsageGridColGutter">grid-col-gutter</a></div></div></header>'}},function(s,l,e){"use strict";var a=Object.prototype.hasOwnProperty;function c(s,l){return Array.isArray(s)?function(s,l){for(var e,a="",i="",n=Array.isArray(l),o=0;o<s.length;o++)(e=c(s[o]))&&(n&&l[o]&&(e=d(e)),a=a+i+e,i=" ");return a}(s,l):s&&"object"==typeof s?function(s){var l="",e="";for(var c in s)c&&s[c]&&a.call(s,c)&&(l=l+e+c,e=" ");return l}(s):s||""}function i(s){if(!s)return"";if("object"==typeof s){var l="";for(var e in s)a.call(s,e)&&(l=l+e+":"+s[e]+";");return l}return s+""}function n(s,l,e,a){return!1!==l&&null!=l&&(l||"class"!==s&&"style"!==s)?!0===l?" "+(a?s:s+'="'+s+'"'):("function"==typeof l.toJSON&&(l=l.toJSON()),"string"==typeof l||(l=JSON.stringify(l),e||-1===l.indexOf('"'))?(e&&(l=d(l))," "+s+'="'+l+'"'):" "+s+"='"+l.replace(/'/g,"&#39;")+"'"):""}l.merge=function s(l,e){if(1===arguments.length){for(var a=l[0],c=1;c<l.length;c++)a=s(a,l[c]);return a}for(var n in e)if("class"===n){var o=l[n]||[];l[n]=(Array.isArray(o)?o:[o]).concat(e[n]||[])}else if("style"===n){var o=i(l[n]);o=o&&";"!==o[o.length-1]?o+";":o;var d=i(e[n]);d=d&&";"!==d[d.length-1]?d+";":d,l[n]=o+d}else l[n]=e[n];return l},l.classes=c,l.style=i,l.attr=n,l.attrs=function(s,l){var e="";for(var o in s)if(a.call(s,o)){var d=s[o];if("class"===o){d=c(d),e=n(o,d,!1,l)+e;continue}"style"===o&&(d=i(d)),e+=n(o,d,!1,l)}return e};var o=/["&<>]/;function d(s){var l=""+s,e=o.exec(l);if(!e)return s;var a,c,i,n="";for(a=e.index,c=0;a<l.length;a++){switch(l.charCodeAt(a)){case 34:i="&quot;";break;case 38:i="&amp;";break;case 60:i="&lt;";break;case 62:i="&gt;";break;default:continue}c!==a&&(n+=l.substring(c,a)),c=a+1,n+=i}return c!==a?n+l.substring(c,a):n}l.escape=d,l.rethrow=function s(l,a,c,i){if(!(l instanceof Error))throw l;if(!("undefined"==typeof window&&a||i))throw l.message+=" on line "+c,l;try{i=i||e(29).readFileSync(a,"utf8")}catch(e){s(l,null,c)}var n=3,o=i.split("\n"),d=Math.max(c-n,0),r=Math.min(o.length,c+n);var n=o.slice(d,r).map(function(s,l){var e=l+d+1;return(e==c?"  > ":"    ")+e+"| "+s}).join("\n");l.path=a;l.message=(a||"Pug")+":"+c+"\n"+n+"\n\n"+l.message;throw l}},function(s,l){},function(s,l,e){},,function(s,l,e){var a=e(28);s.exports=function(s){var l,c="",i={},n=s||{};return function(n){c+='<div class="block-mixins block-grid" id="Grid"><div class="pre-title">mixins</div><div class="title">Grid</div><div class="desc">The Grid mixins are very powerful, based on flexbox. It inlude 4 mixins <code>grid</code> <code>grid-gutter</code> <code>grid-col</code> <code>grid-col-gutter</code>,<code>grid-gutter</code> usually used in <code>grid</code> mixin, and <code>grid-col-gutter</code> used in <code>grid-col</code> mixin, \nof course you can use all mixins on any suit position.</div><div class="block-mixins-sub" id="UsageGrid"><div class="title-sub"><code class="light">grid</code> Arguments</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$display",type:"<string>",val:"flex",desc:"<code>flex</code> | <code>inline-flex</code>, generate a block-level or an inline-level grid container."},{name:"$flex-direction",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>."},{name:"$flex-wrap",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>."},{name:"$flex-flow",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>[row | row-reverse | column | column-reverse]</code> <code>[nowrap | wrap | wrap-reverse]</code>, a shorthand for setting the flex-direction and flex-wrap properties."},{name:"$justify-content",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>, defines the alignment along the main axis."},{name:"$align-items",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>."},{name:"$align-content",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>."},{name:"$gutter",type:"null|<length>",val:"null",desc:`<code>null</code> is no margin of both ends of the grid. <code>${"<length>".replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code> generate a margin of horizontal both ends of the grid.`},{name:"$grid-type",type:"<string>",val:"skeleton",desc:"<code>skeleton</code> | <code>margin-offset</code>, the type of grid."}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(33).call(this,s))?"":l)+'</div><div class="block-mixins-sub" id="UsageGridGutter"><div class="title-sub"><code class="light">grid-gutter</code> Arguments</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$margin",type:"null|<length>",val:"null",desc:"margins around grids."},{name:"$margin-top",type:"null|<length>",val:"null",desc:"margin top on grids."},{name:"$margin-right",type:"null|<length>",val:"null",desc:"margin right on grids."},{name:"$margin-bottom",type:"null|<length>",val:"null",desc:"margin bottom on grids."},{name:"$margin-left",type:"null|<length>",val:"null",desc:"margin left on grids."}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(34).call(this,s))?"":l)+'</div><div class="block-mixins-sub" id="UsageGridCol"><div class="title-sub"><code class="light">grid-col</code> Arguments</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$col",type:"null|<number>|<length>|<string>",val:"null",desc:`<code>null</code> is no set columns. <code>${"<number>".replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code> is number of columns. <code>initial</code>, <code>auto</code>, <code>equal</code>, <code>none</code> and <code>breakpoint</code> are preset columns. <code>${"<length>".replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code> is unit set columns.`},{name:"$grid-columns",type:"<number>",val:"24",desc:"the total number of columns in the grid."},{name:"$col-offset",type:"null|<length>",val:"null",desc:`offset a width of columns (<code>${"<no percentage length>".replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code> is experimental stage).`},{name:"$gutter",type:"null|<length>",val:"null",desc:`<code>null</code> is no margin between columns. <code>${"<length>".replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code> generate a margin of between columns (<code>${"<no percentage length>".replace(/</g,"&lt;").replace(/>/g,"&gt;")}</code> is experimental stage).`},{name:"$condensed",type:"<boolean>",val:"false",desc:"<code>true</code> should cut the top and bottom margins of the columns."},{name:"$align-self",type:"null|<string>",val:"null",desc:"<code>null</code> | <code>auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>."},{name:"$flex-grow",type:"<number>",val:"0",desc:"grow relative to the rest of the columns in the grid."},{name:"$flex-shrink",type:"<number>",val:"1",desc:"shrink relative to the rest of the columns in the grid."},{name:"$flex-basis",type:"content|<length>",val:"auto",desc:"initial main size of the columns."},{name:"$order",type:"null|<integer>",val:"null",desc:"control the order in which appear in the grid container."},{name:"$grid-type",type:"<string>",val:"skeleton",desc:"<code>skeleton</code> | <code>margin-offset</code>, the type of grid."},{name:"$last-child",type:"<boolean>",val:"false",desc:"<code>true</code> | <code>false</code>, adjust the last-child of the columns, if the <code>$grid-type</code> is <code>margin-offset</code>."}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(35).call(this,s))?"":l)+'</div><div class="block-mixins-sub" id="UsageGridColGutter"><div class="title-sub"><code class="light">grid-col-gutter</code> Arguments</div><div class="desc">Generate the margins around columns. <code>grid-gutter</code> mixin alias.</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$margin",type:"null|<length>",val:"null",desc:"margins around columns."},{name:"$margin-top",type:"null|<length>",val:"null",desc:"margin top on columns."},{name:"$margin-right",type:"null|<length>",val:"null",desc:"margin right on columns."},{name:"$margin-bottom",type:"null|<length>",val:"null",desc:"margin bottom on columns."},{name:"$margin-left",type:"null|<length>",val:"null",desc:"margin left on columns."}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(36).call(this,s))?"":l)+'</div><div class="desc">The demo default <code>.grid</code>, defualt grid has no gutter.</div><div class="grid">',function(){var s=n;if("number"==typeof s.length)for(var e=0,i=s.length;e<i;e++){var o=s[e];c=c+"<div"+a.attr("class",a.classes(["col","border-bottom",[`col-${o}`,e%2==1?"border-right":""]],[!1,!1,!0]),!1,!0)+">"+a.escape(null==(l=`col-${o}`)?"":l)+"</div>"}else for(var e in i=0,s)i++,o=s[e],c=c+"<div"+a.attr("class",a.classes(["col","border-bottom",[`col-${o}`,e%2==1?"border-right":""]],[!1,!1,!0]),!1,!0)+">"+a.escape(null==(l=`col-${o}`)?"":l)+"</div>"}.call(this),c+='</div><div class="desc">The demo <code>.grid.gutter</code>, grid with gutter.</div><div class="grid gutter">',function(){var s=n;if("number"==typeof s.length)for(var e=0,i=s.length;e<i;e++){var o=s[e];c=c+"<div"+a.attr("class",a.classes(["col",[`col-${o}`]],[!1,!0]),!1,!0)+">"+a.escape(null==(l=`col-${o}`)?"":l)+"</div>"}else for(var e in i=0,s)i++,o=s[e],c=c+"<div"+a.attr("class",a.classes(["col",[`col-${o}`]],[!1,!0]),!1,!0)+">"+a.escape(null==(l=`col-${o}`)?"":l)+"</div>"}.call(this),c+='</div><div class="desc">The demo <code>.grid.gutter.condensed</code>, grid with gutter, but condensed.</div><div class="grid gutter condensed">',function(){var s=n;if("number"==typeof s.length)for(var e=0,i=s.length;e<i;e++){var o=s[e];c=c+"<div"+a.attr("class",a.classes(["col","border-bottom",[`col-${o}`]],[!1,!1,!0]),!1,!0)+">"+a.escape(null==(l=`col-${o}`)?"":l)+"</div>"}else for(var e in i=0,s)i++,o=s[e],c=c+"<div"+a.attr("class",a.classes(["col","border-bottom",[`col-${o}`]],[!1,!1,!0]),!1,!0)+">"+a.escape(null==(l=`col-${o}`)?"":l)+"</div>"}.call(this),c+="</div></div>"}.call(this,"grid"in n?n.grid:"undefined"!=typeof grid?grid:void 0),c}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example"><div class="desc"><code>grid</code> mixin usage.</div><div class="row row-example-shower"><div class="col"><div class="example-mixins-grid"><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-16">16</div></div></div></div><div class="row row-example-code"><div class="col">html<pre class="code-source"><code class="hljs scss">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid"</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-16"</span>&gt;<span class="hljs-number">16</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div></div><div class="row row-example-code"><div class="col">scss<pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/grid\'</span>;\n@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-grid</span> {\n    @<span class="hljs-keyword">include</span> grid(<span class="hljs-variable">$flex-flow</span>: row);\n    <span class="hljs-attribute">text-align</span>: center;\n    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n\n    <span class="hljs-selector-class">.example-mixins-grid-col-8</span> {\n        @<span class="hljs-keyword">include</span> grid-col(<span class="hljs-variable">$col</span>: 8, <span class="hljs-variable">$grid-columns</span>: 24);\n        @<span class="hljs-keyword">include</span> border-right(<span class="hljs-variable">$color</span>: <span class="hljs-number">#f5f5f5</span>);\n        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#48cfad</span>;\n    }\n    <span class="hljs-selector-class">.example-mixins-grid-col-16</span> {\n        @<span class="hljs-keyword">include</span> grid-col(<span class="hljs-variable">$col</span>: 16, <span class="hljs-variable">$grid-columns</span>: 24);\n        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#48cfad</span>;\n    }\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example"><div class="desc"><code>grid-gutter</code> mixin usage, It usually used in <code>grid</code> mixin.</div><div class="row row-example-shower"><div class="col"><div class="example-mixins-grid-gutter"><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-16">16</div></div></div></div><div class="row row-example-code"><div class="col">html<pre class="code-source"><code class="hljs scss">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-gutter"</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-16"</span>&gt;<span class="hljs-number">16</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div></div><div class="row row-example-code"><div class="col">scss<pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/grid\'</span>;\n@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-grid-gutter</span> {\n    @<span class="hljs-keyword">include</span> grid(<span class="hljs-variable">$flex-flow</span>: row);\n    @<span class="hljs-keyword">include</span> grid-gutter(<span class="hljs-variable">$margin</span>: 0 40px / 2 * -1);\n    <span class="hljs-comment">/* \n        above equal the simple format like this:\n        @include grid($flex-flow: row, $gutter: 40px);\n    */</span>\n    <span class="hljs-attribute">text-align</span>: center;\n    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n\n    <span class="hljs-selector-class">.example-mixins-grid-col-8</span> {\n        @<span class="hljs-keyword">include</span> grid-col(<span class="hljs-variable">$col</span>: 8, <span class="hljs-variable">$grid-columns</span>: 24);\n        @<span class="hljs-keyword">include</span> border-right(<span class="hljs-variable">$color</span>: <span class="hljs-number">#f5f5f5</span>);\n        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#48cfad</span>;\n    }\n    <span class="hljs-selector-class">.example-mixins-grid-col-16</span> {\n        @<span class="hljs-keyword">include</span> grid-col(<span class="hljs-variable">$col</span>: 16, <span class="hljs-variable">$grid-columns</span>: 24);\n        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#48cfad</span>;\n    }\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example"><div class="desc"><code>grid-col</code> mixin usage.</div><div class="row row-example-shower"><div class="col"><div class="example-mixins-grid-col"><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div></div></div></div><div class="row row-example-code"><div class="col">html<pre class="code-source"><code class="hljs scss">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col"</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div></div><div class="row row-example-code"><div class="col">scss<pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/grid\'</span>;\n@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-grid-col</span> {\n    @<span class="hljs-keyword">include</span> grid(<span class="hljs-variable">$flex-flow</span>: row);\n    <span class="hljs-attribute">text-align</span>: center;\n    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n\n    <span class="hljs-selector-class">.example-mixins-grid-col-8</span> {\n        @<span class="hljs-keyword">include</span> grid-col(<span class="hljs-variable">$col</span>: 8, <span class="hljs-variable">$grid-columns</span>: 24);\n        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#48cfad</span>;\n        &amp;:nth-child(n+2){\n            @<span class="hljs-keyword">include</span> border-left(<span class="hljs-variable">$color</span>: <span class="hljs-number">#f5f5f5</span>);\n        }\n    }\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example"><div class="desc"><code>grid-col-gutter</code> mixin usage, <code>grid</code> & <code>grid-col</code> with gutter.</div><div class="row row-example-shower"><div class="col"><div class="example-mixins-grid-col-gutter"><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div></div></div></div><div class="row row-example-code"><div class="col">html<pre class="code-source"><code class="hljs scss">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-gutter"</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div></div><div class="row row-example-code"><div class="col">scss<pre class="code-source"><code class="hljs scss">@import <span class="hljs-string">\'~global.css/src/mixins/grid\'</span>;\n\n.example-mixins-<span class="hljs-keyword">grid</span>-col-gutter {\n    @include <span class="hljs-keyword">grid</span>($flex-<span class="hljs-keyword">flow</span>: row wrap, $gutter: <span class="hljs-number">2</span>%);\n    <span class="hljs-comment">/*\n        above equal the simple format like this:\n        @include grid($flex-flow: row wrap);\n        @include grid-gutter($margin: 0 ((2% / 2) * -1));\n    */</span>\n    <span class="hljs-keyword">text</span>-<span class="hljs-keyword">align</span>: center;\n    <span class="hljs-keyword">color</span>: #fff;\n\n    .example-mixins-<span class="hljs-keyword">grid</span>-col<span class="hljs-number">-8</span> {\n        @include <span class="hljs-keyword">grid</span>-col($col: <span class="hljs-number">8</span>, $grid-columns: <span class="hljs-number">24</span>, $gutter: <span class="hljs-number">2</span>%);\n        <span class="hljs-comment">/*\n            **NOTE**: !important! above usage *not equal* below code, \n            because of *grid-col-gutter* used in *grid-col* is complex,\n            can\'t easy split in two single mixins include.\n            \n            @include grid-col($col: 8, $grid-columns: 24);\n            @include grid-col-gutter($margin: 0 (2% / 2) 2%);\n        */</span>\n        background-<span class="hljs-keyword">color</span>: #<span class="hljs-number">48</span>cfad;\n    }\n}</code></pre></div></div><br><div class="desc"><code>grid-col-gutter</code> mixin usage, <code>grid</code> & <code>grid-col</code> with gutter, <em class="note">but condensed (no vertical margin, has horizontal margin)</em>.</div><div class="row row-example-shower"><div class="col"><div class="example-mixins-grid-col-gutter-condensed"><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div><div class="example-mixins-grid-col-8">8</div></div></div></div><div class="row row-example-code"><div class="col">html<pre class="code-source"><code class="hljs scss">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-gutter-condensed"</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"example-mixins-grid-col-8"</span>&gt;<span class="hljs-number">8</span>&lt;/<span class="hljs-keyword">div</span>&gt;\n&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre></div></div><div class="row row-example-code"><div class="col">scss<pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/grid\'</span>;\n@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-grid-col-gutter-condensed</span> {\n    @<span class="hljs-keyword">include</span> grid(<span class="hljs-variable">$flex-flow</span>: row wrap, <span class="hljs-variable">$gutter</span>: 2%);\n    <span class="hljs-attribute">text-align</span>: center;\n    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n\n    <span class="hljs-selector-class">.example-mixins-grid-col-8</span> {\n        @<span class="hljs-keyword">include</span> grid-col(<span class="hljs-variable">$col</span>: 8, <span class="hljs-variable">$grid-columns</span>: 24, <span class="hljs-variable">$gutter</span>: 2%, <span class="hljs-variable">$condensed</span>: true);\n        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#48cfad</span>;\n    }\n}</code></pre></div></div></div>'}},function(s,l,e){},,function(s,l,e){var a=e(28);s.exports=function(s){var l,c="",i={};return c+='<div class="block-mixins block-border" id="Border"><div class="pre-title">mixins</div><div class="title">Border</div><div class="desc">The Border mixins aim to resolve retina resolution border\'s 1 physical pixel, It include <code>border</code><code>border-radius</code><code>border-top</code><code>border-bottom</code><code>border-vertical</code><code>border-left</code><code>border-right</code><code>border-horizontal</code>, They have same arguments, get detail below.</div><div class="title-sub">Arguments</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$width",type:"<length>",val:"1px",desc:"Border width, default is 1px, and you cound get 1 physical pixel, it looks great on retina screen device."},{name:"$style",type:"<string>",val:"solid",desc:"Of course it support all border-style's val, but 1px hack just support <code>solid</code> mode."},{name:"$color",type:"<color>",val:"#dddddd",desc:"Any valid color."},{name:"$pseudo",type:"<string>",val:"':after'",desc:"Support 2 types pseudo-element  `:after`&`:before`, use like this <code>':after'</code> <code>':before'</code>. <em class=\"note\">NOTE: Dont miss out quotes <code>'</code>, or be invalid.</em>"}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(40).call(this,s))?"":l)+(null==(l=e(41).call(this,s))?"":l)+(null==(l=e(42).call(this,s))?"":l)+(null==(l=e(43).call(this,s))?"":l)+(null==(l=e(44).call(this,s))?"":l)+(null==(l=e(45).call(this,s))?"":l)+(null==(l=e(46).call(this,s))?"":l)+(null==(l=e(47).call(this,s))?"":l)+'<div class="desc">The demo retina resolution\'s thin border vs normal border.    </div><div class="demo-out-of-the-box"><div class="row"><div class="col-6">border</div><div class="col-18 row gutter"><div class="col-12 border">.border</div><div class="col-12 border-normal"></div></div></div><div class="row"><div class="col-6">border-top</div><div class="col-18 row gutter"><div class="col-12 border-top">.border-top</div><div class="col-12 border-top-normal"></div></div></div><div class="row"><div class="col-6">border-bottom</div><div class="col-18 row gutter"><div class="col-12 border-bottom">.border-bottom</div><div class="col-12 border-bottom-normal"></div></div></div><div class="row"><div class="col-6">border-vertical</div><div class="col-18 row gutter"><div class="col-12 border-vertical">.border-vertical</div><div class="col-12 border-vertical-normal"></div></div></div><div class="row"><div class="col-6">border-left</div><div class="col-18 row gutter"><div class="col-12 border-left">.border-left</div><div class="col-12 border-left-normal"></div></div></div><div class="row"><div class="col-6">border-right</div><div class="col-18 row gutter"><div class="col-12 border-right">.border-right</div><div class="col-12 border-right-normal"></div></div></div><div class="row"><div class="col-6">border-horizontal</div><div class="col-18 row gutter"><div class="col-12 border-horizontal">.border-horizontal</div><div class="col-12 border-horizontal-normal"></div></div></div><div class="row"><div class="col-6">border-radius</div><div class="col-18 row gutter"><div class="col-12 border-radius">.border-radius</div><div class="col-12 border-radius-normal"></div></div></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorder"><div class="desc"><code>border</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border">.example-mixins-border</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border</span>{\n    @<span class="hljs-keyword">include</span> border(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderRadius"><div class="desc"><code>border-radius</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-radius">.example-mixins-border-radius</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-radius</span>{\n    @<span class="hljs-keyword">include</span> border-radius(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>, <span class="hljs-variable">$radius</span>: 10px);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderTop"><div class="desc"><code>border-top</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-top">.example-mixins-border-top</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-top</span>{\n    @<span class="hljs-keyword">include</span> border-top(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderBottom"><div class="desc"><code>border-bottom</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-bottom">.example-mixins-border-bottom</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-bottom</span>{\n    @<span class="hljs-keyword">include</span> border-bottom(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderVertical"><div class="desc"><code>border-vertical</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-vertical">.example-mixins-border-vertical</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-vertical</span>{\n    @<span class="hljs-keyword">include</span> border-vertical(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderLeft"><div class="desc"><code>border-left</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-left">.example-mixins-border-left</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-left</span>{\n    @<span class="hljs-keyword">include</span> border-left(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderRight"><div class="desc"><code>border-right</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-right">.example-mixins-border-right</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-right</span>{\n    @<span class="hljs-keyword">include</span> border-right(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageBorderHorizontal"><div class="desc"><code>border-horizontal</code> mixin usage.</div><div class="row row-example-shower"><div class="col example-mixins-border-horizontal">.example-mixins-border-horizontal</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-border-horizontal</span>{\n    @<span class="hljs-keyword">include</span> border-horizontal(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n}</code></pre></div></div></div>'}},function(s,l,e){},,function(s,l,e){var a=e(28);s.exports=function(s){var l,c="",i={};return c+='<div class="block-mixins block-ellipsis" id="Ellipsis"><div class="pre-title">mixins</div><div class="title">Ellipsis</div><div class="desc">The Ellipsis mixins just has only one mixin <code>ellipsis</code>, It resolve both single-line and multi-line ellipsis.</div><div class="title-sub">Arguments</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$line",type:"<number>",val:"1",desc:"The line's count you want to show, before set ellipsis."}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(51).call(this,s))?"":l)+"</div>"}},function(s,l,e){var a=e(28);s.exports=function(s){var l,e="";return e=e+'<div class="block-usage-example" id="UsageEllipsis"><div class="desc"><code>ellipsis</code> mixin usage.</div><br><div class="desc">Single-line:</div><div class="row row-example-shower"><div class="col example-mixins-ellipsis-single-line">ISC License (ISC)Copyright '+a.escape(null==(l="<YEAR>")?"":l)+" "+a.escape(null==(l="<OWNER>")?"":l)+'\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/ellipsis\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-ellipsis-single-line</span>{\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;\n    <span class="hljs-comment">/* use defualt value */</span>\n    @<span class="hljs-keyword">include</span> ellipsis();\n    <span class="hljs-comment">/* or */</span>\n    @<span class="hljs-keyword">include</span> ellipsis(<span class="hljs-variable">$line</span>: 1);\n}</code></pre></div></div><br><div class="desc">Multi-lines:</div><div class="row row-example-shower"><div class="col example-mixins-ellipsis-multi-lines">ISC License (ISC)Copyright '+a.escape(null==(l="<YEAR>")?"":l)+" "+a.escape(null==(l="<OWNER>")?"":l)+'\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/ellipsis\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-ellipsis-multi-lines</span>{\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;\n    @<span class="hljs-keyword">include</span> ellipsis(<span class="hljs-variable">$line</span>: 3);\n}</code></pre></div></div></div>'}},function(s,l,e){},,function(s,l,e){var a=e(28);s.exports=function(s){var l,c="",i={};return c=c+'<div class="block-mixins block-ripple" id="Ripple"><div class="pre-title">mixins</div><div class="title">Ripple</div><div class="desc">The Ripple mixins just has only one mixin <code>ripple</code>, It give your '+a.escape(null==(l="<button>")?"":l)+' or any <code>no empty element</code> a veryyyyyyy cool ripple effect.</div><div class="title-sub">Arguments</div>',i.paramsTable=l=function(s){this&&this.block,this&&this.attributes,c+='<div class="block-params-table"><div class="row params-table-title border-bottom"><div class="col-5">Name</div><div class="col-5">Type</div><div class="col-5">Default</div><div class="col-9">Description</div></div>',function(){var e=s;if("number"==typeof e.length)for(var i=0,n=e.length;i<n;i++){var o=e[i];c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}else for(var i in n=0,e)n++,o=e[i],c=c+'<div class="row params-table-item border-bottom"><div class="col-5"><code>'+a.escape(null==(l=o.name)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.type)?"":l)+'</code></div><div class="col-5"> <code>'+a.escape(null==(l=o.val)?"":l)+'</code></div><div class="col-9">'+(null==(l=o.desc)?"":l)+"</div></div>"}.call(this),c+="</div>"},i.paramsTable([{name:"$color",type:"<color>",val:"#000",desc:"Any valid color."},{name:"$opacity",type:"<number>",val:".2",desc:"greater than or equal 0 && less than or equal 1."},{name:"$pseudo",type:"<string>",val:"':before'",desc:"Support 2 types pseudo-element  `:after`&`:before`, use like this <code>':after'</code> <code>':before'</code>. <em class=\"note\">NOTE: Dont miss out quotes <code>'</code>, or be invalid.</em>"}]),c=c+'<div class="title-sub">Example</div>'+(null==(l=e(55).call(this,s))?"":l)+"</div>"}},function(s,l,e){e(28);s.exports=function(s){var l="";return l+='<div class="block-usage-example" id="UsageRipple"><div class="desc"><code>ripple</code> mixin usage.</div><div class="row row-example-shower"><div class="col"><div class="example-mixins-ripple">Click Me!</div></div></div><div class="row row-example-code"><div class="col"><pre class="code-source"><code class="hljs scss">@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/ripple\'</span>;\n@<span class="hljs-keyword">import</span> <span class="hljs-string">\'~global.css/src/mixins/border\'</span>;\n\n<span class="hljs-selector-class">.example-mixins-ripple</span>{\n    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;\n    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n    <span class="hljs-attribute">text-align</span>: center;\n    @<span class="hljs-keyword">include</span> ripple(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>);\n    @<span class="hljs-keyword">include</span> border-radius(<span class="hljs-variable">$color</span>: <span class="hljs-number">#48cfad</span>, <span class="hljs-variable">$radius</span>: 10px);\n}</code></pre></div></div></div>'}},function(s,l,e){"use strict";function a(s,l){s.insertAdjacentHTML("beforeend",l)}e.r(l);e(22),e(25);var c=e(27),i=e.n(c),n=function(s){a(s,i()())},o=(e(30),e(32)),d=e.n(o),r=function(s){a(s,d()({grid:function(){let s=[],l=24;for(;l--;)l<11||(24-l-1&&s.push(24-l-1),s.push(l+1));return s}()}))};e(37);var t=e(39),p=e.n(t),v=function(s){a(s,p()())},u=(e(48),e(50)),m=e.n(u),h=function(s){a(s,m()())},g=(e(52),e(54)),b=e.n(g),x=function(s){a(s,b()())};!function(){const s=(l="Main",document.getElementById(l));var l;n(s),v(s),h(s),x(s),r(s)}()}]));